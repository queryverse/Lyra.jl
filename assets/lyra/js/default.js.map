{"version":3,"file":"js/default.js","sources":["webpack:///./src/js/transforms/manipulators/Area.js"],"sourcesContent":["import {inherits, extend}  from 'vega';\r\nimport Manipulators from './Manipulators';\r\nimport annotate from '../../util/annotate-manipulators';\r\nimport {coords, PADDING as PAD} from '../../ctrl/manipulators';\r\n\r\n/**\r\n * @classdesc Represents the AreaManipulators, a Vega data transformation operator.\r\n *\r\n * @description The AreaManipulators calculates manipulators when a Area\r\n * mark instance is selected.\r\n * @extends Manipulators\r\n *\r\n * @param {Model} graph - A Vega model.\r\n *\r\n * @constructor\r\n */\r\nexport default function AreaManipulators(params) {\r\n  Manipulators.call(this, [], params);\r\n}\r\n\r\nAreaManipulators.Definition = extend({}, Manipulators.Definition);\r\n\r\nconst prototype = inherits(AreaManipulators, Manipulators);\r\n\r\nprototype.handles = function(item) {\r\n  const bounds = item.mark.bounds;\r\n  const c = coords(bounds, 'handle');\r\n  return [\r\n    c.topLeft, c.topRight,\r\n    c.bottomLeft, c.bottomRight\r\n  ];\r\n};\r\n\r\nprototype.connectors = function(item) {\r\n  const bounds = item.mark.bounds;\r\n  const c = coords(bounds, 'connector');\r\n  return [c.midCenter];\r\n};\r\n\r\nprototype.channels = function(item) {\r\n  const b  = item.mark.bounds,\r\n      gb = item.mark.group.bounds,\r\n      path = item._svg.getAttribute('d'),\r\n      c = coords(b),\r\n      m = c.midCenter;\r\n\r\n  return []\r\n    // x\r\n    .concat([\r\n      {x: gb.x1, y: item.y}, {x: item.x - PAD, y: item.y}\r\n    ].map(annotate('x', 'span')))\r\n    // y\r\n    .concat([\r\n      {x: item.x, y: gb.y1}, {x: item.x, y: item.y - PAD}\r\n    ].map(annotate('y', 'span')))\r\n    .concat([\r\n      {x: m.x, y: m.y, path: path}\r\n    ].map(annotate('fill', 'border')));\r\n};\r\n\r\nprototype.altchannels = function(item) {\r\n  const b  = item.mark.bounds,\r\n      c = coords(b),\r\n      m = c.midCenter,\r\n      path = item.mark.items[0].pathCache;\r\n\r\n  path = path.map(function(d) {\r\n    return d.join(' ');\r\n  }).join(' ');\r\n\r\n  return [\r\n    {x: m.x, y: m.y, path: path}\r\n  ].map(annotate('stroke', 'border'));\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}